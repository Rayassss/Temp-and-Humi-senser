C51 COMPILER V9.59.0.0   LCD                                                               08/19/2020 12:32:08 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\Lcd.obj
COMPILER INVOKED BY: D:\KEIL5_5.29\C51\BIN\C51.EXE Hardware\Lcd.c LARGE ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\U
                    -ser;.\System;.\Hardware;.\System;.\User) DEBUG OBJECTEXTEND PRINT(.\Listings\Lcd.lst) TABS(2) OBJECT(.\Objects\Lcd.obj)

line level    source

   1          #include "STC8F.h"
   2          #include "Lcd.h"
   3          #include "absacc.h"
   4          #include "intrins.h"
   5          #include "string.h"
   6          #include "AsciiLib.h"
   7          #include "Delay.h"
   8          #include "Font.h"
   9          //sbit bl        =P4^4;//接模块BL引脚，背光可以采用IO控制或者PWM控制，也可以直接接到高电平常亮
  10          sbit scl       =P1^1;//接模块CLK引脚,接裸屏Pin9_SCL
  11          sbit sda       =P1^2;//接模块DIN/MOSI引脚，接裸屏Pin8_SDA
  12          sbit rs        =P1^3;//接模块D/C引脚，接裸屏Pin7_A0
  13          sbit cs        =P1^0;//接模块CE引脚，接裸屏Pin12_CS
  14          sbit reset     =P1^4;//接模块RST引脚，接裸屏Pin6_RES
  15          void delay(unsigned int time)
  16          {
  17   1       unsigned int i,j;
  18   1        for(i=0;i<time;i++)
  19   1         for(j=0;j<250;j++);
  20   1      }
  21          
  22          //向SPI总线传输一个8位数据
  23          void  SPI_WriteData(unsigned char Data)
  24          {
  25   1        unsigned char i=0;
  26   1        for(i=8;i>0;i--)
  27   1        {
  28   2          if(Data&0x80) 
  29   2          sda=1; //输出数据
  30   2          else sda=0;
  31   2          scl=0;
  32   2          scl=1;
  33   2          Data<<=1;
  34   2        }
  35   1      }
  36          //向液晶屏写一个8位指令
  37          void  Lcd_WriteIndex(unsigned char Data)
  38          { 
  39   1          cs=0;
  40   1          rs=0;
  41   1          SPI_WriteData(Data);    
  42   1          cs=1;
  43   1      }
  44          //向液晶屏写一个8位数据
  45          void  Lcd_WriteData(unsigned char Data)
  46          { 
  47   1          unsigned char i=0;
  48   1          cs=0;
  49   1          rs=1;
  50   1          SPI_WriteData(Data);  
  51   1          cs=1;
  52   1      }
  53          //向液晶屏写一个16位数据
  54          void  Lcd_WriteData_16(unsigned int Data)
C51 COMPILER V9.59.0.0   LCD                                                               08/19/2020 12:32:08 PAGE 2   

  55          {
  56   1        unsigned char i=0;
  57   1        cs=0;
  58   1        rs=1;
  59   1        SPI_WriteData(Data>>8);   //写入高8位数据
  60   1        SPI_WriteData(Data);      //写入低8位数据
  61   1        cs=1;
  62   1      
  63   1      }
  64          //LCD复位时序
  65          void Reset(void)
  66          {
  67   1          reset=0;
  68   1          delay(100);
  69   1          reset=1;
  70   1          delay(100);
  71   1      }
  72          //////////////////////////////////////////////////////////////////////////////////////////////
  73          //液晶屏初始化 for S6D02A1
  74          void lcd_initial()
  75          {
  76   1        bl = 0;
  77   1        Delay1000ms() ;
  78   1        bl = 1;
  79   1        Reset();//Reset before LCD Init.
  80   1          
  81   1        //LCD Init For 1.44Inch LCD Panel with ST7735R.
  82   1        Lcd_WriteIndex(0x11);//Sleep exit 
  83   1        delay (120);
  84   1          
  85   1        //ST7735R Frame Rate
  86   1        Lcd_WriteIndex(0xB1); 
  87   1        Lcd_WriteData(0x01); 
  88   1        Lcd_WriteData(0x2C); 
  89   1        Lcd_WriteData(0x2D); 
  90   1      
  91   1        Lcd_WriteIndex(0xB2); 
  92   1        Lcd_WriteData(0x01); 
  93   1        Lcd_WriteData(0x2C); 
  94   1        Lcd_WriteData(0x2D); 
  95   1      
  96   1        Lcd_WriteIndex(0xB3); 
  97   1        Lcd_WriteData(0x01); 
  98   1        Lcd_WriteData(0x2C); 
  99   1        Lcd_WriteData(0x2D); 
 100   1        Lcd_WriteData(0x01); 
 101   1        Lcd_WriteData(0x2C); 
 102   1        Lcd_WriteData(0x2D); 
 103   1        
 104   1        Lcd_WriteIndex(0xB4); //Column inversion 
 105   1        Lcd_WriteData(0x07); 
 106   1        
 107   1        //ST7735R Power Sequence
 108   1        Lcd_WriteIndex(0xC0); 
 109   1        Lcd_WriteData(0xA2); 
 110   1        Lcd_WriteData(0x02); 
 111   1        Lcd_WriteData(0x84); 
 112   1        Lcd_WriteIndex(0xC1); 
 113   1        Lcd_WriteData(0xC5); 
 114   1      
 115   1        Lcd_WriteIndex(0xC2); 
 116   1        Lcd_WriteData(0x0A); 
C51 COMPILER V9.59.0.0   LCD                                                               08/19/2020 12:32:08 PAGE 3   

 117   1        Lcd_WriteData(0x00); 
 118   1      
 119   1        Lcd_WriteIndex(0xC3); 
 120   1        Lcd_WriteData(0x8A); 
 121   1        Lcd_WriteData(0x2A); 
 122   1        Lcd_WriteIndex(0xC4); 
 123   1        Lcd_WriteData(0x8A); 
 124   1        Lcd_WriteData(0xEE); 
 125   1        
 126   1        Lcd_WriteIndex(0xC5); //VCOM 
 127   1        Lcd_WriteData(0x0E); 
 128   1        
 129   1        Lcd_WriteIndex(0x36); //MX, MY, RGB mode 
 130   1        Lcd_WriteData(0xC0); 
 131   1        
 132   1        //ST7735R Gamma Sequence
 133   1        Lcd_WriteIndex(0xe0); 
 134   1        Lcd_WriteData(0x0f); 
 135   1        Lcd_WriteData(0x1a); 
 136   1        Lcd_WriteData(0x0f); 
 137   1        Lcd_WriteData(0x18); 
 138   1        Lcd_WriteData(0x2f); 
 139   1        Lcd_WriteData(0x28); 
 140   1        Lcd_WriteData(0x20); 
 141   1        Lcd_WriteData(0x22); 
 142   1        Lcd_WriteData(0x1f); 
 143   1        Lcd_WriteData(0x1b); 
 144   1        Lcd_WriteData(0x23); 
 145   1        Lcd_WriteData(0x37); 
 146   1        Lcd_WriteData(0x00);  
 147   1        Lcd_WriteData(0x07); 
 148   1        Lcd_WriteData(0x02); 
 149   1        Lcd_WriteData(0x10); 
 150   1      
 151   1        Lcd_WriteIndex(0xe1); 
 152   1        Lcd_WriteData(0x0f); 
 153   1        Lcd_WriteData(0x1b); 
 154   1        Lcd_WriteData(0x0f); 
 155   1        Lcd_WriteData(0x17); 
 156   1        Lcd_WriteData(0x33); 
 157   1        Lcd_WriteData(0x2c); 
 158   1        Lcd_WriteData(0x29); 
 159   1        Lcd_WriteData(0x2e); 
 160   1        Lcd_WriteData(0x30); 
 161   1        Lcd_WriteData(0x30); 
 162   1        Lcd_WriteData(0x39); 
 163   1        Lcd_WriteData(0x3f); 
 164   1        Lcd_WriteData(0x00); 
 165   1        Lcd_WriteData(0x07); 
 166   1        Lcd_WriteData(0x03); 
 167   1        Lcd_WriteData(0x10);  
 168   1        
 169   1        Lcd_WriteIndex(0x2a);
 170   1        Lcd_WriteData(0x00);
 171   1        Lcd_WriteData(0x00+2);
 172   1        Lcd_WriteData(0x00);
 173   1        Lcd_WriteData(0x80+2);
 174   1      
 175   1        Lcd_WriteIndex(0x2b);
 176   1        Lcd_WriteData(0x00);
 177   1        Lcd_WriteData(0x00+3);
 178   1        Lcd_WriteData(0x00);
C51 COMPILER V9.59.0.0   LCD                                                               08/19/2020 12:32:08 PAGE 4   

 179   1        Lcd_WriteData(0x80+3);
 180   1        
 181   1        Lcd_WriteIndex(0xF0); //Enable test command  
 182   1        Lcd_WriteData(0x01); 
 183   1        Lcd_WriteIndex(0xF6); //Disable ram power save mode 
 184   1        Lcd_WriteData(0x00); 
 185   1        
 186   1        Lcd_WriteIndex(0x3A); //65k mode 
 187   1        Lcd_WriteData(0x05); 
 188   1        
 189   1        
 190   1        Lcd_WriteIndex(0x29);//Display on
 191   1      
 192   1      }
 193          /*************************************************
 194          函数名：LCD_Set_Region
 195          功能：设置lcd显示区域，在此区域写点数据自动换行
 196          入口参数：xy起点和终点
 197          返回值：无
 198          *************************************************/
 199          
 200          //全屏填充函数
 201          void Lcd_SetRegion(unsigned int x_start,unsigned int y_start,unsigned int x_end,unsigned int y_end,unsigne
             -d char mode)//mode是横竖屏模式，1为横屏，2为竖屏
 202          { 
 203   1        if(mode == 2)
 204   1        {
 205   2        Lcd_WriteIndex(0x2a);
 206   2        Lcd_WriteData(0x02);
 207   2        Lcd_WriteData(x_start+2);
 208   2        Lcd_WriteData(0x02);
 209   2        Lcd_WriteData(x_end+2);
 210   2      
 211   2        Lcd_WriteIndex(0x2b);
 212   2        Lcd_WriteData(0x01);
 213   2        Lcd_WriteData(y_start+1);
 214   2        Lcd_WriteData(0x01);
 215   2        Lcd_WriteData(y_end+1);
 216   2        }
 217   1        else if(mode == 1)
 218   1        {
 219   2        Lcd_WriteIndex(0x2a);
 220   2        Lcd_WriteData(0x02);
 221   2        Lcd_WriteData(x_start+2);
 222   2        Lcd_WriteData(0x02);
 223   2        Lcd_WriteData(x_end+2);
 224   2      
 225   2        Lcd_WriteIndex(0x2b);
 226   2        Lcd_WriteData(0x01);
 227   2        Lcd_WriteData(y_start+1);
 228   2        Lcd_WriteData(0x01);
 229   2        Lcd_WriteData(y_end+1); 
 230   2        }
 231   1          //#endif
 232   1        Lcd_WriteIndex(0x2c);
 233   1      }
 234          
 235          
 236          void PutPixel(unsigned int x_start,unsigned int y_start,unsigned int color)
 237          {
 238   1        Lcd_SetRegion(x_start,y_start,x_start+1,y_start+1,2);
 239   1        Lcd_WriteData_16(color);
C51 COMPILER V9.59.0.0   LCD                                                               08/19/2020 12:32:08 PAGE 5   

 240   1      }
 241          void dsp_single_colour(int color)
 242          {
 243   1        unsigned char i,j;
 244   1        Lcd_SetRegion(0,0,128-1,160-1,2);
 245   1        for (i=0;i<160;i++)
 246   1            for (j=0;j<128;j++)
 247   1                Lcd_WriteData_16(color);
 248   1      }
 249          void Dsp_arc_area()
 250          {
 251   1        unsigned char i,j;
 252   1        Lcd_SetRegion(0,0,80,18,2);
 253   1        for (i=0;i<18;i++)
 254   1            for (j=0;j<80;j++)
 255   1                Lcd_WriteData_16(WHITE);
 256   1      }
 257          //显示一个英文字符
 258          void Display_ASCII8X16(unsigned int x0,unsigned int y0,unsigned char *s)
 259          {
 260   1        int i,j,k,x,y,xx;
 261   1        unsigned char qm;
 262   1        long int ulOffset;
 263   1        char  ywbuf[32],temp[2];
 264   1        for(i = 0; i<strlen((unsigned char*)s);i++)
 265   1        {
 266   2          if(((unsigned char)(*(s+i))) >= 161)
 267   2          {
 268   3            temp[0] = *(s+i);
 269   3            temp[1] = '\0';
 270   3          } 
 271   2          else
 272   2          {
 273   3            qm = *(s+i);
 274   3            ulOffset = (long int)(qm) * 16;   
 275   3            for (j = 0; j < 16; j ++)
 276   3            {
 277   4              ywbuf[j]=Zk_ASCII8X16[ulOffset+j];
 278   4            }          
 279   3            for(y = 0;y < 16;y++)
 280   3            {
 281   4                for(x=0;x<8;x++) 
 282   4                {
 283   5                   k=x % 8;             
 284   5                  if(ywbuf[y]&(0x80 >> k))
 285   5                  {
 286   6                    xx=x0+x+i*8;
 287   6                    PutPixel(xx,y+y0,RED);
 288   6                  }           
 289   5                }
 290   4            }
 291   3          }
 292   2        }       
 293   1      }
 294          void Display_Num(unsigned char x,unsigned int  y,char *str,unsigned int dcolor,unsigned int bgcolor)
 295          {
 296   1        unsigned char Temp_Count = 0;
 297   1        while(*str)
 298   1        {
 299   2          unsigned int i,Num;
 300   2          unsigned char j,m;                  //定义临时变量
 301   2          Num = *str;
C51 COMPILER V9.59.0.0   LCD                                                               08/19/2020 12:32:08 PAGE 6   

 302   2          if(Num == '.')
 303   2            Num = 10;
 304   2          else
 305   2            Num = Num - 48;  //ASCII转数字
 306   2          Lcd_SetRegion(x+Temp_Count*15,y,x + Temp_Count*15 + 15, y + 32 - 1,1);   // 设置为纵向显示
 307   2            for(i=0;i<64;i++)
 308   2            {                   //32个字节 每个字节都要一个点一个点处理 所以是处理了32X8次
 309   3              m = Number_16_32_[Num * 64 + i];              //读取对应字节数据
 310   3              for(j=0;j<8;j++)                  //显示一个字节  一个字节8位 也就是8个点
 311   3              {
 312   4                if((m&0x80)==0x80)              //判断是否是要写入点   如果是 给字体颜色
 313   4                  Lcd_WriteData_16(dcolor);     
 314   4                else                  //如果不是 为背景色  给颜色
 315   4                  Lcd_WriteData_16(bgcolor);
 316   4                m<<=1;                        //左移一位  判断下一点
 317   4              }
 318   3            }
 319   2          Temp_Count++;
 320   2          str++;
 321   2        }
 322   1      }
 323          void LCD_Clear(unsigned int Color)
 324          {
 325   1        unsigned char i,j;
 326   1        Lcd_SetRegion(0,0,127,159,2);
 327   1        for (i=0;i<160;i++)
 328   1        {
 329   2            for (j=0;j<128;j++)
 330   2          {
 331   3                Lcd_WriteData_16(Color);
 332   3          }
 333   2        }
 334   1      }
 335          void Display_Desc()
 336          { 
 337   1          Display_ASCII8X16(10,10,"Dreamix is so so beautiful");
 338   1      }
 339          void go_Lcd()
 340          {
 341   1          lcd_initial();
 342   1          bl=1;
 343   1          dsp_single_colour(WHITE);//白色
 344   1          Display_Desc();         //版本
 345   1      }
 346          //void Lcd_showchar(unsigned char x,unsigned char y,int bgcolor,int Fontcolor)
 347          //{
 348          //  int i = 0,j = 0;
 349          //  unsigned char Temp = 0;
 350          //  Lcd_SetRegion(x,y,x + 79,y + 127,1);
 351          //  for(i=0; i<80*16; i++)
 352          //  {
 353          //    Temp = Font_A[i];
 354          //    for(j=0; j<8; j++)
 355          //    {
 356          //      if(Temp & 0x80)
 357          //      {
 358          //        Lcd_WriteData_16(Fontcolor);
 359          //      }
 360          //      else
 361          //      {
 362          //        Lcd_WriteData_16(bgcolor);
 363          //      }
C51 COMPILER V9.59.0.0   LCD                                                               08/19/2020 12:32:08 PAGE 7   

 364          //      Temp <<= 1;
 365          //    }
 366          //  }
 367          //}
 368          //void GUI_sprintf_Asc_8_16(unsigned char x,unsigned int y,unsigned char value,unsigned int dcolor,unsigne
             -d int bgcolor,unsigned char mode) 
 369          //{  
 370          //  unsigned char i,j;
 371          //  unsigned char *temp=Asc_8_16_;    //temp是*temp的地址  这里temp就是zifu的首地址       
 372          //  temp+=(value-32)*16;   //确定要显示的值
 373          //                   //用ascii表  前32个ascii没有存入zifu库里 所以要减32
 374          //                         //每个字符用16个字节显示 所以在乘以16  就是对应的显示位的首地址
 375          //    if(mode==0)Lcd_SetRegion(x,y,x+7,y+15,1);    //设置区域      
 376          //    if(mode==1)Lcd_SetRegion(x,y,x+7,y+15,1); //设置区域          
 377          //    for(j=0;j<16;j++)
 378          //    {
 379          //      for(i=0;i<8;i++)        //先横扫
 380          //      {          
 381          //        if((*temp&(1<<(7-i)))!=0)      //将1 左移 然后对应位进行相与        
 382          //          Lcd_Write_Data(dcolor);      //显示字符颜色
 383          //         
 384          //        else        
 385          //          Lcd_Write_Data(bgcolor);       //显示背景颜色   
 386          //      }
 387          //      temp++;                  //下一字节
 388          //    }
 389          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1654    ----
   CONSTANT SIZE    =   6108    ----
   XDATA SIZE       =   ----      89
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
