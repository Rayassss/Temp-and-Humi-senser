C51 COMPILER V9.59.0.0   LCD                                                               08/12/2020 22:14:48 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\Lcd.obj
COMPILER INVOKED BY: D:\KEIL5_5.29\C51\BIN\C51.EXE Hardware\Lcd.c LARGE ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\U
                    -ser;.\System;.\Hardware;.\System;.\User) DEBUG OBJECTEXTEND PRINT(.\Listings\Lcd.lst) TABS(2) OBJECT(.\Objects\Lcd.obj)

line level    source

   1          #include "STC8F.h"
   2          #include "Lcd.h"
   3          #include "absacc.h"
   4          #include "intrins.h"
   5          #include "string.h"
   6          #include "AsciiLib.h"
   7          #include "Delay.h"
   8          //sbit bl        =P4^4;//接模块BL引脚，背光可以采用IO控制或者PWM控制，也可以直接接到高电平常亮
   9          sbit scl       =P1^1;//接模块CLK引脚,接裸屏Pin9_SCL
  10          sbit sda       =P1^2;//接模块DIN/MOSI引脚，接裸屏Pin8_SDA
  11          sbit rs        =P1^3;//接模块D/C引脚，接裸屏Pin7_A0
  12          sbit cs        =P1^0;//接模块CE引脚，接裸屏Pin12_CS
  13          sbit reset     =P1^4;//接模块RST引脚，接裸屏Pin6_RES
  14          void delay(unsigned int time)
  15          {
  16   1       unsigned int i,j;
  17   1        for(i=0;i<time;i++)
  18   1         for(j=0;j<250;j++);
  19   1      }
  20          
  21          //向SPI总线传输一个8位数据
  22          void  SPI_WriteData(unsigned char Data)
  23          {
  24   1        unsigned char i=0;
  25   1        for(i=8;i>0;i--)
  26   1        {
  27   2          if(Data&0x80) 
  28   2          sda=1; //输出数据
  29   2          else sda=0;
  30   2          scl=0;
  31   2          scl=1;
  32   2          Data<<=1;
  33   2        }
  34   1      }
  35          //向液晶屏写一个8位指令
  36          void  Lcd_WriteIndex(unsigned char Data)
  37          { 
  38   1          cs=0;
  39   1          rs=0;
  40   1          SPI_WriteData(Data);    
  41   1          cs=1;
  42   1      }
  43          //向液晶屏写一个8位数据
  44          void  Lcd_WriteData(unsigned char Data)
  45          { 
  46   1          unsigned char i=0;
  47   1          cs=0;
  48   1          rs=1;
  49   1          SPI_WriteData(Data);  
  50   1          cs=1;
  51   1      }
  52          //向液晶屏写一个16位数据
  53          void  Lcd_WriteData_16(unsigned int Data)
  54          {
C51 COMPILER V9.59.0.0   LCD                                                               08/12/2020 22:14:48 PAGE 2   

  55   1        unsigned char i=0;
  56   1        cs=0;
  57   1        rs=1;
  58   1        SPI_WriteData(Data>>8);   //写入高8位数据
  59   1        SPI_WriteData(Data);      //写入低8位数据
  60   1        cs=1;
  61   1      
  62   1      }
  63          //LCD复位时序
  64          void Reset(void)
  65          {
  66   1          reset=0;
  67   1          delay(100);
  68   1          reset=1;
  69   1          delay(100);
  70   1      }
  71          //////////////////////////////////////////////////////////////////////////////////////////////
  72          //液晶屏初始化 for S6D02A1
  73          void lcd_initial()
  74          {
  75   1        Reset();//Reset before LCD Init.
  76   1          
  77   1        //LCD Init For 1.44Inch LCD Panel with ST7735R.
  78   1        Lcd_WriteIndex(0x11);//Sleep exit 
  79   1        delay (120);
  80   1          
  81   1        //ST7735R Frame Rate
  82   1        Lcd_WriteIndex(0xB1); 
  83   1        Lcd_WriteData(0x01); 
  84   1        Lcd_WriteData(0x2C); 
  85   1        Lcd_WriteData(0x2D); 
  86   1      
  87   1        Lcd_WriteIndex(0xB2); 
  88   1        Lcd_WriteData(0x01); 
  89   1        Lcd_WriteData(0x2C); 
  90   1        Lcd_WriteData(0x2D); 
  91   1      
  92   1        Lcd_WriteIndex(0xB3); 
  93   1        Lcd_WriteData(0x01); 
  94   1        Lcd_WriteData(0x2C); 
  95   1        Lcd_WriteData(0x2D); 
  96   1        Lcd_WriteData(0x01); 
  97   1        Lcd_WriteData(0x2C); 
  98   1        Lcd_WriteData(0x2D); 
  99   1        
 100   1        Lcd_WriteIndex(0xB4); //Column inversion 
 101   1        Lcd_WriteData(0x07); 
 102   1        
 103   1        //ST7735R Power Sequence
 104   1        Lcd_WriteIndex(0xC0); 
 105   1        Lcd_WriteData(0xA2); 
 106   1        Lcd_WriteData(0x02); 
 107   1        Lcd_WriteData(0x84); 
 108   1        Lcd_WriteIndex(0xC1); 
 109   1        Lcd_WriteData(0xC5); 
 110   1      
 111   1        Lcd_WriteIndex(0xC2); 
 112   1        Lcd_WriteData(0x0A); 
 113   1        Lcd_WriteData(0x00); 
 114   1      
 115   1        Lcd_WriteIndex(0xC3); 
 116   1        Lcd_WriteData(0x8A); 
C51 COMPILER V9.59.0.0   LCD                                                               08/12/2020 22:14:48 PAGE 3   

 117   1        Lcd_WriteData(0x2A); 
 118   1        Lcd_WriteIndex(0xC4); 
 119   1        Lcd_WriteData(0x8A); 
 120   1        Lcd_WriteData(0xEE); 
 121   1        
 122   1        Lcd_WriteIndex(0xC5); //VCOM 
 123   1        Lcd_WriteData(0x0E); 
 124   1        
 125   1        Lcd_WriteIndex(0x36); //MX, MY, RGB mode 
 126   1        Lcd_WriteData(0xC0); 
 127   1        
 128   1        //ST7735R Gamma Sequence
 129   1        Lcd_WriteIndex(0xe0); 
 130   1        Lcd_WriteData(0x0f); 
 131   1        Lcd_WriteData(0x1a); 
 132   1        Lcd_WriteData(0x0f); 
 133   1        Lcd_WriteData(0x18); 
 134   1        Lcd_WriteData(0x2f); 
 135   1        Lcd_WriteData(0x28); 
 136   1        Lcd_WriteData(0x20); 
 137   1        Lcd_WriteData(0x22); 
 138   1        Lcd_WriteData(0x1f); 
 139   1        Lcd_WriteData(0x1b); 
 140   1        Lcd_WriteData(0x23); 
 141   1        Lcd_WriteData(0x37); 
 142   1        Lcd_WriteData(0x00);  
 143   1        Lcd_WriteData(0x07); 
 144   1        Lcd_WriteData(0x02); 
 145   1        Lcd_WriteData(0x10); 
 146   1      
 147   1        Lcd_WriteIndex(0xe1); 
 148   1        Lcd_WriteData(0x0f); 
 149   1        Lcd_WriteData(0x1b); 
 150   1        Lcd_WriteData(0x0f); 
 151   1        Lcd_WriteData(0x17); 
 152   1        Lcd_WriteData(0x33); 
 153   1        Lcd_WriteData(0x2c); 
 154   1        Lcd_WriteData(0x29); 
 155   1        Lcd_WriteData(0x2e); 
 156   1        Lcd_WriteData(0x30); 
 157   1        Lcd_WriteData(0x30); 
 158   1        Lcd_WriteData(0x39); 
 159   1        Lcd_WriteData(0x3f); 
 160   1        Lcd_WriteData(0x00); 
 161   1        Lcd_WriteData(0x07); 
 162   1        Lcd_WriteData(0x03); 
 163   1        Lcd_WriteData(0x10);  
 164   1        
 165   1        Lcd_WriteIndex(0x2a);
 166   1        Lcd_WriteData(0x00);
 167   1        Lcd_WriteData(0x00+2);
 168   1        Lcd_WriteData(0x00);
 169   1        Lcd_WriteData(0x80+2);
 170   1      
 171   1        Lcd_WriteIndex(0x2b);
 172   1        Lcd_WriteData(0x00);
 173   1        Lcd_WriteData(0x00+3);
 174   1        Lcd_WriteData(0x00);
 175   1        Lcd_WriteData(0x80+3);
 176   1        
 177   1        Lcd_WriteIndex(0xF0); //Enable test command  
 178   1        Lcd_WriteData(0x01); 
C51 COMPILER V9.59.0.0   LCD                                                               08/12/2020 22:14:48 PAGE 4   

 179   1        Lcd_WriteIndex(0xF6); //Disable ram power save mode 
 180   1        Lcd_WriteData(0x00); 
 181   1        
 182   1        Lcd_WriteIndex(0x3A); //65k mode 
 183   1        Lcd_WriteData(0x05); 
 184   1        
 185   1        
 186   1        Lcd_WriteIndex(0x29);//Display on
 187   1      
 188   1      }
 189          /*************************************************
 190          函数名：LCD_Set_Region
 191          功能：设置lcd显示区域，在此区域写点数据自动换行
 192          入口参数：xy起点和终点
 193          返回值：无
 194          *************************************************/
 195          
 196          //全屏填充函数
 197          void Lcd_SetRegion(unsigned int x_start,unsigned int y_start,unsigned int x_end,unsigned int y_end,unsigne
             -d char mode)//mode是横竖屏模式，1为横屏，2为竖屏
 198          { 
 199   1        if(mode == 2)
 200   1        {
 201   2        Lcd_WriteIndex(0x2a);
 202   2        Lcd_WriteData(0x02);
 203   2        Lcd_WriteData(x_start+2);
 204   2        Lcd_WriteData(0x02);
 205   2        Lcd_WriteData(x_end+2);
 206   2      
 207   2        Lcd_WriteIndex(0x2b);
 208   2        Lcd_WriteData(0x01);
 209   2        Lcd_WriteData(y_start+1);
 210   2        Lcd_WriteData(0x01);
 211   2        Lcd_WriteData(y_end+1);
 212   2        }
 213   1        else if(mode == 1)
 214   1        {
 215   2        Lcd_WriteIndex(0x2a);
 216   2        Lcd_WriteData(0x02);
 217   2        Lcd_WriteData(x_start+2);
 218   2        Lcd_WriteData(0x02);
 219   2        Lcd_WriteData(x_end+2);
 220   2      
 221   2        Lcd_WriteIndex(0x2b);
 222   2        Lcd_WriteData(0x01);
 223   2        Lcd_WriteData(y_start+1);
 224   2        Lcd_WriteData(0x01);
 225   2        Lcd_WriteData(y_end+1); 
 226   2        }
 227   1          //#endif
 228   1        Lcd_WriteIndex(0x2c);
 229   1      }
 230          
 231          
 232          void PutPixel(unsigned int x_start,unsigned int y_start,unsigned int color)
 233          {
 234   1        Lcd_SetRegion(x_start,y_start,x_start+1,y_start+1,2);
 235   1        Lcd_WriteData_16(color);
 236   1      }
 237          void dsp_single_colour(int color)
 238          {
 239   1        unsigned char i,j;
C51 COMPILER V9.59.0.0   LCD                                                               08/12/2020 22:14:48 PAGE 5   

 240   1        Lcd_SetRegion(0,0,128-1,160-1,2);
 241   1        for (i=0;i<160;i++)
 242   1            for (j=0;j<128;j++)
 243   1                Lcd_WriteData_16(color);
 244   1      }
 245          //显示一个英文字符
 246          void Display_ASCII8X16(unsigned int x0,unsigned int y0,unsigned char *s)
 247          {
 248   1        int i,j,k,x,y,xx;
 249   1        unsigned char qm;
 250   1        long int ulOffset;
 251   1        char  ywbuf[32],temp[2];
 252   1        for(i = 0; i<strlen((unsigned char*)s);i++)
 253   1        {
 254   2          if(((unsigned char)(*(s+i))) >= 161)
 255   2          {
 256   3            temp[0] = *(s+i);
 257   3            temp[1] = '\0';
 258   3          } 
 259   2          else
 260   2          {
 261   3            qm = *(s+i);
 262   3            ulOffset = (long int)(qm) * 16;   
 263   3            for (j = 0; j < 16; j ++)
 264   3            {
 265   4              ywbuf[j]=Zk_ASCII8X16[ulOffset+j];
 266   4            }          
 267   3            for(y = 0;y < 16;y++)
 268   3            {
 269   4                for(x=0;x<8;x++) 
 270   4                {
 271   5                   k=x % 8;             
 272   5                  if(ywbuf[y]&(0x80 >> k))
 273   5                  {
 274   6                    xx=x0+x+i*8;
 275   6                    PutPixel(xx,y+y0,RED);
 276   6                  }           
 277   5                }
 278   4            }
 279   3          }
 280   2        }       
 281   1      }
 282          void LCD_Clear(unsigned int Color)
 283          {
 284   1        unsigned char i,j;
 285   1        Lcd_SetRegion(0,0,127,159,2);
 286   1        for (i=0;i<160;i++)
 287   1        {
 288   2            for (j=0;j<128;j++)
 289   2          {
 290   3                Lcd_WriteData_16(Color);
 291   3          }
 292   2        }
 293   1      }
 294          void Display_Desc()
 295          { 
 296   1          Display_ASCII8X16(10,10,"Dreamix is so so beautiful");
 297   1      }
 298          void go_Lcd()
 299          {
 300   1          lcd_initial();
 301   1          bl=1;
C51 COMPILER V9.59.0.0   LCD                                                               08/12/2020 22:14:48 PAGE 6   

 302   1          dsp_single_colour(WHITE);//白色
 303   1          Display_Desc();         //版本
 304   1      }
 305          
 306          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1299    ----
   CONSTANT SIZE    =   4124    ----
   XDATA SIZE       =   ----      72
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
