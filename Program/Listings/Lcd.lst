C51 COMPILER V9.59.0.0   LCD                                                               08/21/2020 17:22:55 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\Lcd.obj
COMPILER INVOKED BY: D:\KEIL5_5.29\C51\BIN\C51.EXE Hardware\Lcd.c LARGE ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE INCDIR(.\U
                    -ser;.\System;.\Hardware;.\System;.\User) DEBUG OBJECTEXTEND PRINT(.\Listings\Lcd.lst) TABS(2) OBJECT(.\Objects\Lcd.obj)

line level    source

   1          #include "STC8F.h"
   2          #include "Lcd.h"
   3          #include "absacc.h"
   4          #include "intrins.h"
   5          #include "string.h"
   6          #include "AsciiLib.h"
   7          #include "Delay.h"
   8          #include "Font.h"
   9          //sbit bl        =P4^4;//接模块BL引脚，背光可以采用IO控制或者PWM控制，也可以直接接到高电平常亮
  10          sbit scl       =P1^1;//接模块CLK引脚,接裸屏Pin9_SCL
  11          sbit sda       =P1^2;//接模块DIN/MOSI引脚，接裸屏Pin8_SDA
  12          sbit rs        =P1^3;//接模块D/C引脚，接裸屏Pin7_A0
  13          sbit cs        =P1^0;//接模块CE引脚，接裸屏Pin12_CS
  14          sbit reset     =P1^4;//接模块RST引脚，接裸屏Pin6_RES
  15          void delay(unsigned int time)
  16          {
  17   1       unsigned int i,j;
  18   1        for(i=0;i<time;i++)
  19   1         for(j=0;j<250;j++);
  20   1      }
  21          
  22          //向SPI总线传输一个8位数据
  23          void  SPI_WriteData(unsigned char Data)
  24          {
  25   1        unsigned char i=0;
  26   1        for(i=8;i>0;i--)
  27   1        {
  28   2          if(Data&0x80) 
  29   2          sda=1; //输出数据
  30   2          else sda=0;
  31   2          scl=0;
  32   2          scl=1;
  33   2          Data<<=1;
  34   2        }
  35   1      }
  36          //向液晶屏写一个8位指令
  37          void  Lcd_WriteIndex(unsigned char Data)
  38          { 
  39   1          cs=0;
  40   1          rs=0;
  41   1          SPI_WriteData(Data);    
  42   1          cs=1;
  43   1      }
  44          //向液晶屏写一个8位数据
  45          void  Lcd_WriteData(unsigned char Data)
  46          { 
  47   1          unsigned char i=0;
  48   1          cs=0;
  49   1          rs=1;
  50   1          SPI_WriteData(Data);  
  51   1          cs=1;
  52   1      }
  53          //向液晶屏写一个16位数据
  54          void  Lcd_WriteData_16(unsigned int Data)
C51 COMPILER V9.59.0.0   LCD                                                               08/21/2020 17:22:55 PAGE 2   

  55          {
  56   1        unsigned char i=0;
  57   1        cs=0;
  58   1        rs=1;
  59   1        SPI_WriteData(Data>>8);   //写入高8位数据
  60   1        SPI_WriteData(Data);      //写入低8位数据
  61   1        cs=1;
  62   1      
  63   1      }
  64          //LCD复位时序
  65          void Reset(void)
  66          {
  67   1          reset=0;
  68   1          delay(100);
  69   1          reset=1;
  70   1          delay(100);
  71   1      }
  72          //////////////////////////////////////////////////////////////////////////////////////////////
  73          //液晶屏初始化 for S6D02A1
  74          void lcd_initial()
  75          {
  76   1        bl = 0;
  77   1        Delay1000ms() ;
  78   1        bl = 1;
  79   1        Reset();//Reset before LCD Init.
  80   1          
  81   1        //LCD Init For 1.44Inch LCD Panel with ST7735R.
  82   1        Lcd_WriteIndex(0x11);//Sleep exit 
  83   1        delay (120);
  84   1          
  85   1        //ST7735R Frame Rate
  86   1        Lcd_WriteIndex(0xB1); 
  87   1        Lcd_WriteData(0x01); 
  88   1        Lcd_WriteData(0x2C); 
  89   1        Lcd_WriteData(0x2D); 
  90   1      
  91   1        Lcd_WriteIndex(0xB2); 
  92   1        Lcd_WriteData(0x01); 
  93   1        Lcd_WriteData(0x2C); 
  94   1        Lcd_WriteData(0x2D); 
  95   1      
  96   1        Lcd_WriteIndex(0xB3); 
  97   1        Lcd_WriteData(0x01); 
  98   1        Lcd_WriteData(0x2C); 
  99   1        Lcd_WriteData(0x2D); 
 100   1        Lcd_WriteData(0x01); 
 101   1        Lcd_WriteData(0x2C); 
 102   1        Lcd_WriteData(0x2D); 
 103   1        
 104   1        Lcd_WriteIndex(0xB4); //Column inversion 
 105   1        Lcd_WriteData(0x07); 
 106   1        
 107   1        //ST7735R Power Sequence
 108   1        Lcd_WriteIndex(0xC0); 
 109   1        Lcd_WriteData(0xA2); 
 110   1        Lcd_WriteData(0x02); 
 111   1        Lcd_WriteData(0x84); 
 112   1        Lcd_WriteIndex(0xC1); 
 113   1        Lcd_WriteData(0xC5); 
 114   1      
 115   1        Lcd_WriteIndex(0xC2); 
 116   1        Lcd_WriteData(0x0A); 
C51 COMPILER V9.59.0.0   LCD                                                               08/21/2020 17:22:55 PAGE 3   

 117   1        Lcd_WriteData(0x00); 
 118   1      
 119   1        Lcd_WriteIndex(0xC3); 
 120   1        Lcd_WriteData(0x8A); 
 121   1        Lcd_WriteData(0x2A); 
 122   1        Lcd_WriteIndex(0xC4); 
 123   1        Lcd_WriteData(0x8A); 
 124   1        Lcd_WriteData(0xEE); 
 125   1        
 126   1        Lcd_WriteIndex(0xC5); //VCOM 
 127   1        Lcd_WriteData(0x0E); 
 128   1        
 129   1        Lcd_WriteIndex(0x36); //MX, MY, RGB mode 
 130   1        Lcd_WriteData(0xC0); 
 131   1        
 132   1        //ST7735R Gamma Sequence
 133   1        Lcd_WriteIndex(0xe0); 
 134   1        Lcd_WriteData(0x0f); 
 135   1        Lcd_WriteData(0x1a); 
 136   1        Lcd_WriteData(0x0f); 
 137   1        Lcd_WriteData(0x18); 
 138   1        Lcd_WriteData(0x2f); 
 139   1        Lcd_WriteData(0x28); 
 140   1        Lcd_WriteData(0x20); 
 141   1        Lcd_WriteData(0x22); 
 142   1        Lcd_WriteData(0x1f); 
 143   1        Lcd_WriteData(0x1b); 
 144   1        Lcd_WriteData(0x23); 
 145   1        Lcd_WriteData(0x37); 
 146   1        Lcd_WriteData(0x00);  
 147   1        Lcd_WriteData(0x07); 
 148   1        Lcd_WriteData(0x02); 
 149   1        Lcd_WriteData(0x10); 
 150   1      
 151   1        Lcd_WriteIndex(0xe1); 
 152   1        Lcd_WriteData(0x0f); 
 153   1        Lcd_WriteData(0x1b); 
 154   1        Lcd_WriteData(0x0f); 
 155   1        Lcd_WriteData(0x17); 
 156   1        Lcd_WriteData(0x33); 
 157   1        Lcd_WriteData(0x2c); 
 158   1        Lcd_WriteData(0x29); 
 159   1        Lcd_WriteData(0x2e); 
 160   1        Lcd_WriteData(0x30); 
 161   1        Lcd_WriteData(0x30); 
 162   1        Lcd_WriteData(0x39); 
 163   1        Lcd_WriteData(0x3f); 
 164   1        Lcd_WriteData(0x00); 
 165   1        Lcd_WriteData(0x07); 
 166   1        Lcd_WriteData(0x03); 
 167   1        Lcd_WriteData(0x10);  
 168   1        
 169   1        Lcd_WriteIndex(0x2a);
 170   1        Lcd_WriteData(0x00);
 171   1        Lcd_WriteData(0x00+2);
 172   1        Lcd_WriteData(0x00);
 173   1        Lcd_WriteData(0x80+2);
 174   1      
 175   1        Lcd_WriteIndex(0x2b);
 176   1        Lcd_WriteData(0x00);
 177   1        Lcd_WriteData(0x00+3);
 178   1        Lcd_WriteData(0x00);
C51 COMPILER V9.59.0.0   LCD                                                               08/21/2020 17:22:55 PAGE 4   

 179   1        Lcd_WriteData(0x80+3);
 180   1        
 181   1        Lcd_WriteIndex(0xF0); //Enable test command  
 182   1        Lcd_WriteData(0x01); 
 183   1        Lcd_WriteIndex(0xF6); //Disable ram power save mode 
 184   1        Lcd_WriteData(0x00); 
 185   1        
 186   1        Lcd_WriteIndex(0x3A); //65k mode 
 187   1        Lcd_WriteData(0x05); 
 188   1        
 189   1        
 190   1        Lcd_WriteIndex(0x29);//Display on
 191   1        dsp_single_colour(WHITE);
 192   1      }
 193          /*************************************************
 194          函数名：LCD_Set_Region
 195          功能：设置lcd显示区域，在此区域写点数据自动换行
 196          入口参数：xy起点和终点
 197          返回值：无
 198          *************************************************/
 199          
 200          //全屏填充函数
 201          void Lcd_SetRegion(unsigned int x_start,unsigned int y_start,unsigned int x_end,unsigned int y_end,unsigne
             -d char mode)//mode是横竖屏模式，1为横屏，2为竖屏
 202          { 
 203   1        if(mode == 2)
 204   1        {
 205   2        Lcd_WriteIndex(0x2a);
 206   2        Lcd_WriteData(0x02);
 207   2        Lcd_WriteData(x_start+2);
 208   2        Lcd_WriteData(0x02);
 209   2        Lcd_WriteData(x_end+2);
 210   2      
 211   2        Lcd_WriteIndex(0x2b);
 212   2        Lcd_WriteData(0x01);
 213   2        Lcd_WriteData(y_start+1);
 214   2        Lcd_WriteData(0x01);
 215   2        Lcd_WriteData(y_end+1);
 216   2        }
 217   1        else if(mode == 1)
 218   1        {
 219   2        Lcd_WriteIndex(0x2a);
 220   2        Lcd_WriteData(0x02);
 221   2        Lcd_WriteData(x_start+2);
 222   2        Lcd_WriteData(0x02);
 223   2        Lcd_WriteData(x_end+2);
 224   2      
 225   2        Lcd_WriteIndex(0x2b);
 226   2        Lcd_WriteData(0x01);
 227   2        Lcd_WriteData(y_start+1);
 228   2        Lcd_WriteData(0x01);
 229   2        Lcd_WriteData(y_end+1); 
 230   2        }
 231   1          //#endif
 232   1        Lcd_WriteIndex(0x2c);
 233   1      }
 234          
 235          
 236          void PutPixel(unsigned int x_start,unsigned int y_start,unsigned int color)
 237          {
 238   1        Lcd_SetRegion(x_start,y_start,x_start+1,y_start+1,2);
 239   1        Lcd_WriteData_16(color);
C51 COMPILER V9.59.0.0   LCD                                                               08/21/2020 17:22:55 PAGE 5   

 240   1      }
 241          void dsp_single_colour(int color)
 242          {
 243   1        unsigned char i,j;
 244   1        Lcd_SetRegion(0,0,128-1,160-1,2);
 245   1        for (i=0;i<160;i++)
 246   1            for (j=0;j<128;j++)
 247   1                Lcd_WriteData_16(color);
 248   1      }
 249          //显示一个英文字符
 250          void Display_ASCII8X16(unsigned int x0,unsigned int y0,unsigned char *s)
 251          {
 252   1        int i,j,k,x,y,xx;
 253   1        unsigned char qm;
 254   1        long int ulOffset;
 255   1        char  ywbuf[32],temp[2];
 256   1        for(i = 0; i<strlen((unsigned char*)s);i++)
 257   1        {
 258   2          if(((unsigned char)(*(s+i))) >= 161)
 259   2          {
 260   3            temp[0] = *(s+i);
 261   3            temp[1] = '\0';
 262   3          } 
 263   2          else
 264   2          {
 265   3            qm = *(s+i);
 266   3            ulOffset = (long int)(qm) * 16;   
 267   3            for (j = 0; j < 16; j ++)
 268   3            {
 269   4              ywbuf[j]=Zk_ASCII8X16[ulOffset+j];
 270   4            }          
 271   3            for(y = 0;y < 16;y++)
 272   3            {
 273   4                for(x=0;x<8;x++) 
 274   4                {
 275   5                   k=x % 8;             
 276   5                  if(ywbuf[y]&(0x80 >> k))
 277   5                  {
 278   6                    xx=x0+x+i*8;
 279   6                    PutPixel(xx,y+y0,BLACK);
 280   6                  }           
 281   5                }
 282   4            }
 283   3          }
 284   2        }       
 285   1      }
 286          void Display_Num(unsigned char x,unsigned char y,unsigned char *str)
 287          {
 288   1        unsigned char Temp_Count = 0;
 289   1        while(*str)
 290   1        {
 291   2          unsigned int i,Num;
 292   2          unsigned char j,m;                  //定义临时变量
 293   2          Num = *str;
 294   2          if(Num == '.')
 295   2            Num = 10;
 296   2          else
 297   2            Num = Num - 48;  //ASCII转数字
 298   2          Lcd_SetRegion(x+Temp_Count*15,y,x + Temp_Count*15 + 15, y + 32 - 1,1);   // 设置为纵向显示
 299   2            for(i=0;i<64;i++)
 300   2            {                   //32个字节 每个字节都要一个点一个点处理 所以是处理了32X8次
 301   3              m = Number_16_32_[Num * 64 + i];              //读取对应字节数据
C51 COMPILER V9.59.0.0   LCD                                                               08/21/2020 17:22:55 PAGE 6   

 302   3              for(j=0;j<8;j++)                  //显示一个字节  一个字节8位 也就是8个点
 303   3              {
 304   4                if((m&0x80)==0x80)              //判断是否是要写入点   如果是 给字体颜色
 305   4                  Lcd_WriteData_16(BLACK);      
 306   4                else                  //如果不是 为背景色  给颜色
 307   4                  Lcd_WriteData_16(WHITE);
 308   4                m<<=1;                        //左移一位  判断下一点
 309   4              }
 310   3            }
 311   2          Temp_Count++;
 312   2          str++;
 313   2        }
 314   1      }
 315          void LCD_Clear(unsigned int Color)
 316          {
 317   1        unsigned char i,j;
 318   1        Lcd_SetRegion(0,0,127,159,2);
 319   1        for (i=0;i<160;i++)
 320   1        {
 321   2            for (j=0;j<128;j++)
 322   2          {
 323   3                Lcd_WriteData_16(Color);
 324   3          }
 325   2        }
 326   1      }
 327          void Lcd_arc_clear(unsigned char index)
 328          {
 329   1        unsigned char i,j;
 330   1        switch(index)
 331   1        {
 332   2          case HOUR:
 333   2            Lcd_SetRegion(0,0,20,20,2);
 334   2            for (i=0;i<20;i++)
 335   2            {
 336   3              for (j=0;j<20;j++)
 337   3              {
 338   4                Lcd_WriteData_16(WHITE);
 339   4              }
 340   3            }
 341   2            break;
 342   2          case MIN:
 343   2            Lcd_SetRegion(50,0,70,20,2);
 344   2            for (i=0;i<20;i++)
 345   2            {
 346   3              for (j=0;j<20;j++)
 347   3              {
 348   4                Lcd_WriteData_16(WHITE);
 349   4              }
 350   3            }
 351   2            break;
 352   2          case SEC:
 353   2            Lcd_SetRegion(100,0,120,20,2);
 354   2            for (i=0;i<20;i++)
 355   2            {
 356   3              for (j=0;j<20;j++)
 357   3              {
 358   4                Lcd_WriteData_16(WHITE);
 359   4              }
 360   3            }
 361   2            break;  
 362   2          case YEAR:
 363   2            Lcd_SetRegion(0,40,37,60,2);
C51 COMPILER V9.59.0.0   LCD                                                               08/21/2020 17:22:55 PAGE 7   

 364   2            for (i=0;i<37;i++)
 365   2            {
 366   3              for (j=0;j<20;j++)
 367   3              {
 368   4                Lcd_WriteData_16(WHITE);
 369   4              }
 370   3            }
 371   2            break;  
 372   2          case MONTH:
 373   2            Lcd_SetRegion(50,40,70,60,2);
 374   2            for (i=0;i<20;i++)
 375   2            {
 376   3              for (j=0;j<20;j++)
 377   3              {
 378   4                Lcd_WriteData_16(WHITE);
 379   4              }
 380   3            }
 381   2            break;      
 382   2          case DATE:
 383   2            Lcd_SetRegion(90,40,110,60,2);
 384   2            for (i=0;i<20;i++)
 385   2            {
 386   3              for (j=0;j<20;j++)
 387   3              {
 388   4                Lcd_WriteData_16(WHITE);
 389   4              }
 390   3            }
 391   2            break;
 392   2        }
 393   1      }
 394          
 395          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2078    ----
   CONSTANT SIZE    =   6081    ----
   XDATA SIZE       =   ----      86
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
